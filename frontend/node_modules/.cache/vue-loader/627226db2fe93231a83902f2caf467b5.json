{"remainingRequest":"/home/bartek/Desktop/komponenty/projekt/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/bartek/Desktop/komponenty/projekt/frontend/src/views/ConverterView.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/bartek/Desktop/komponenty/projekt/frontend/src/views/ConverterView.vue","mtime":1589649672739},{"path":"/home/bartek/Desktop/komponenty/projekt/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/bartek/Desktop/komponenty/projekt/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/bartek/Desktop/komponenty/projekt/frontend/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/home/bartek/Desktop/komponenty/projekt/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/bartek/Desktop/komponenty/projekt/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport service from '@/rest/service'\nimport { saveAs } from 'file-saver'\nimport io from 'socket.io-client'\nexport default {\n  name: 'ConverterView',\n  data () {\n    return {\n      name: '',\n      files: null,\n      uploading: false,\n      newFormat: 'Avi',\n      showInfo: false,\n    }\n  },\n  computed: {\n    formData () {\n      const data = new FormData()\n      const file = this.files[0]\n      data.append('data', file, file.name)\n      return data\n    },\n  },\n  methods: {\n    importVideo () {\n      this.uploading = true\n      console.log(this.files)\n      const oldFileName = this.files[0].name.split('.')[0]\n      const newFileName = oldFileName + '.' + this.newFormat\n      let myUUID\n      const socket = io('http://localhost:5000/test')\n      socket.on('send_file', (tmpUUID) => {\n        myUUID = tmpUUID\n        console.log(myUUID)\n        console.log('sending_file')\n        service.convertVideo(this.newFormat, myUUID, this.formData)\n          .catch(_ => {\n            socket.disconnect()\n          })\n      })\n      socket.on('download_file', () => {\n        console.log('downloading_file')\n        service.downloadVideo(myUUID)\n          .then(response => {\n            console.log(response)\n            const fileNameHeader = 'x-suggested-filename'\n            const suggestedFileName = response.headers[fileNameHeader]\n            const effectiveFileName = (suggestedFileName === undefined ? newFileName : suggestedFileName)\n\n            const file = new File([response.data], effectiveFileName)\n            saveAs(file)\n            socket.disconnect()\n            this.uploading = false\n          })\n          .catch(_ => {\n            socket.disconnect()\n          })\n      })\n      // service.convertVideo(this.newFormat, this.formData)\n      //   .then(response => {\n      //     console.log(response)\n      //     const fileNameHeader = 'x-suggested-filename'\n      //     const suggestedFileName = response.headers[fileNameHeader]\n      //     const effectiveFileName = (suggestedFileName === undefined ? newFileName : suggestedFileName)\n      //\n      //     const file = new File([response.data], effectiveFileName)\n      //     saveAs(file)\n      //     this.uploading = false\n      //   })\n    },\n  },\n}\n",{"version":3,"sources":["ConverterView.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ConverterView.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <v-card-text>\n    <v-card-title>\n      Convert\n    </v-card-title>\n    <v-file-input\n      v-model=\"files\"\n      :multiple=\"false\"\n      :show-size=\"1024\"\n      placeholder=\"Wybierz plik\"\n      prepend-icon=\"mdi-paperclip\"\n      outlined\n      @input=\"$v.files.$touch()\"\n    >\n      <v-btn small>\n        Normal\n      </v-btn>\n    </v-file-input>\n    <p class=\"text-left\">\n      Convert to\n    </p>\n    <v-row>\n      <v-container fluid>\n        <v-radio-group\n          v-model=\"newFormat\"\n          :mandatory=\"true\"\n          row\n        >\n          <v-radio\n            label=\"avi\"\n            value=\"avi\"\n          />\n          <v-radio\n            label=\"mp4\"\n            value=\"mp4\"\n          />\n        </v-radio-group>\n      </v-container>\n    </v-row>\n    <v-btn\n      small\n      @click=\"importVideo\"\n    >\n      Convert video\n    </v-btn>\n  </v-card-text>\n</template>\n\n<script>\n  import service from '@/rest/service'\n  import { saveAs } from 'file-saver'\n  import io from 'socket.io-client'\n  export default {\n    name: 'ConverterView',\n    data () {\n      return {\n        name: '',\n        files: null,\n        uploading: false,\n        newFormat: 'Avi',\n        showInfo: false,\n      }\n    },\n    computed: {\n      formData () {\n        const data = new FormData()\n        const file = this.files[0]\n        data.append('data', file, file.name)\n        return data\n      },\n    },\n    methods: {\n      importVideo () {\n        this.uploading = true\n        console.log(this.files)\n        const oldFileName = this.files[0].name.split('.')[0]\n        const newFileName = oldFileName + '.' + this.newFormat\n        let myUUID\n        const socket = io('http://localhost:5000/test')\n        socket.on('send_file', (tmpUUID) => {\n          myUUID = tmpUUID\n          console.log(myUUID)\n          console.log('sending_file')\n          service.convertVideo(this.newFormat, myUUID, this.formData)\n            .catch(_ => {\n              socket.disconnect()\n            })\n        })\n        socket.on('download_file', () => {\n          console.log('downloading_file')\n          service.downloadVideo(myUUID)\n            .then(response => {\n              console.log(response)\n              const fileNameHeader = 'x-suggested-filename'\n              const suggestedFileName = response.headers[fileNameHeader]\n              const effectiveFileName = (suggestedFileName === undefined ? newFileName : suggestedFileName)\n\n              const file = new File([response.data], effectiveFileName)\n              saveAs(file)\n              socket.disconnect()\n              this.uploading = false\n            })\n            .catch(_ => {\n              socket.disconnect()\n            })\n        })\n        // service.convertVideo(this.newFormat, this.formData)\n        //   .then(response => {\n        //     console.log(response)\n        //     const fileNameHeader = 'x-suggested-filename'\n        //     const suggestedFileName = response.headers[fileNameHeader]\n        //     const effectiveFileName = (suggestedFileName === undefined ? newFileName : suggestedFileName)\n        //\n        //     const file = new File([response.data], effectiveFileName)\n        //     saveAs(file)\n        //     this.uploading = false\n        //   })\n      },\n    },\n  }\n</script>\n\n<style scoped>\n\n</style>\n"]}]}
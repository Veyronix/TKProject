{"remainingRequest":"/home/bartek/Desktop/komponenty/projekt/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/bartek/Desktop/komponenty/projekt/frontend/src/views/EditorView.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/bartek/Desktop/komponenty/projekt/frontend/src/views/EditorView.vue","mtime":1589719053845},{"path":"/home/bartek/Desktop/komponenty/projekt/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/bartek/Desktop/komponenty/projekt/frontend/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/bartek/Desktop/komponenty/projekt/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/bartek/Desktop/komponenty/projekt/frontend/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/home/bartek/Desktop/komponenty/projekt/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/bartek/Desktop/komponenty/projekt/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport service from '@/rest/service'\nexport default {\n  name: 'EditorView',\n  data () {\n    return {\n      name: '',\n      files: null,\n      uploading: false,\n      newFormat: 'Avi',\n      showInfo: false,\n      hflip: false,\n      vflip: false,\n      from: null,\n      to: null,\n      rules: {\n        from: value => !isNaN(value),\n        to: value => (!isNaN(value) && ((parseInt(this.to) > parseInt(this.from)))) || value === undefined || value === '' || 'From have to be bigger than to',\n      },\n    }\n  },\n  computed: {\n    formData () {\n      const data = new FormData()\n      const file = this.files[0]\n      data.append('data', file, file.name)\n      return data\n    },\n  },\n  methods: {\n    importVideo () {\n      this.uploading = true\n      console.log(this.files)\n      const filename = this.files[0].name\n      const that = this\n      service.editVideo(this.formData, this.getOperations())\n        .then(response => {\n          console.log('convert response')\n          console.log(response)\n          service.downloadRec(response.data.uuid, filename, function () {\n            that.uploading = false\n          })\n        })\n        .catch(error => {\n          that.uploading = false\n          console.log(error)\n        })\n    },\n    getOperations () {\n      let operations = ''\n      if (this.hflip) {\n        operations += 'hflip,'\n      }\n      if (this.vflip) {\n        operations += 'vflip,'\n      }\n      console.log(operations)\n      return operations\n    },\n  },\n}\n",{"version":3,"sources":["EditorView.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"EditorView.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <v-card-text>\n    <v-card-title>\n      Editor\n    </v-card-title>\n    <v-file-input\n      v-model=\"files\"\n      :multiple=\"false\"\n      :show-size=\"1024\"\n      placeholder=\"Wybierz plik\"\n      prepend-icon=\"mdi-paperclip\"\n      outlined\n      @input=\"$v.files.$touch()\"\n    />\n    <v-row>\n      <p class=\"text-left\">\n        Flip video\n      </p>\n    </v-row>\n    <v-row justify=\"space-around\">\n      <v-checkbox\n        v-model=\"hflip\"\n        class=\"mx-2\"\n        label=\"Horizontal Flip\"\n      />\n      <v-checkbox\n        v-model=\"vflip\"\n        class=\"mx-2\"\n        label=\"Vertical Flip\"\n      />\n    </v-row>\n    <v-row>\n      <p class=\"text-left\">\n        Cut video\n      </p>\n    </v-row>\n    <v-row justify=\"space-around\">\n      <v-col\n        cols=\"12\"\n        sm=\"4\"\n      >\n        <v-text-field\n          v-model=\"from\"\n          :rules=\"[rules.from]\"\n          label=\"From Frame\"\n          single-line\n          outlined\n          clearable\n          hint=\"From Frame\"\n        />\n      </v-col>\n      <v-col\n        cols=\"12\"\n        sm=\"4\"\n      >\n        <v-text-field\n          v-model=\"to\"\n          :rules=\"[rules.to]\"\n          label=\"To Frame\"\n          single-line\n          outlined\n          clearable\n          hint=\"To Frame\"\n        />\n      </v-col>\n    </v-row>\n\n    <v-btn\n      small\n      :loading=\"uploading\"\n      @click=\"importVideo\"\n    >\n      Convert video\n    </v-btn>\n  </v-card-text>\n</template>\n\n<script>\n  import service from '@/rest/service'\n  export default {\n    name: 'EditorView',\n    data () {\n      return {\n        name: '',\n        files: null,\n        uploading: false,\n        newFormat: 'Avi',\n        showInfo: false,\n        hflip: false,\n        vflip: false,\n        from: null,\n        to: null,\n        rules: {\n          from: value => !isNaN(value),\n          to: value => (!isNaN(value) && ((parseInt(this.to) > parseInt(this.from)))) || value === undefined || value === '' || 'From have to be bigger than to',\n        },\n      }\n    },\n    computed: {\n      formData () {\n        const data = new FormData()\n        const file = this.files[0]\n        data.append('data', file, file.name)\n        return data\n      },\n    },\n    methods: {\n      importVideo () {\n        this.uploading = true\n        console.log(this.files)\n        const filename = this.files[0].name\n        const that = this\n        service.editVideo(this.formData, this.getOperations())\n          .then(response => {\n            console.log('convert response')\n            console.log(response)\n            service.downloadRec(response.data.uuid, filename, function () {\n              that.uploading = false\n            })\n          })\n          .catch(error => {\n            that.uploading = false\n            console.log(error)\n          })\n      },\n      getOperations () {\n        let operations = ''\n        if (this.hflip) {\n          operations += 'hflip,'\n        }\n        if (this.vflip) {\n          operations += 'vflip,'\n        }\n        console.log(operations)\n        return operations\n      },\n    },\n  }\n</script>\n\n<style scoped>\n\n</style>\n"]}]}